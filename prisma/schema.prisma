// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =========================
// User Model
// =========================
model User {
  id          String     @id @default(uuid())                // Primary key (UUID)
  username    String     @unique @db.VarChar(30)                           // Unique username
  firstName   String                                         // First name
  lastName    String                                         // Last name
  email       String     @unique  @db.VarChar(50)                          // Unique email
  password    String                                         // Hashed password
  createdAt   DateTime   @default(now())                    // Created timestamp
  updatedAt   DateTime   @updatedAt                         // Auto updated timestamp
  role UserRole @default(User)
  deletedAt DateTime?                                      // Optional soft delete timestamp


  // Relations
  rooms        Room[]     @relation("UserRooms")             // Many-to-many with Room
  createdRooms Room[]     @relation("createdRooms")          // Rooms created by this user
  messages     Message[]  @relation("UserMessages")          // Messages sent by this user
  aiQueries    AIQuery[]  @relation("UserAIQueries")         // AI queries submitted
  media        Media[]    @relation("UserMedia")             // Uploaded media files
}

// =========================
// Room Model
// =========================
model Room {
  id          String     @id @default(uuid())               // Primary key
  name        String                                        // Room name
  description String?                                       // Optional room description
  slug        String     @unique
  createdAt   DateTime   @default(now())                    // Created timestamp
  updatedAt   DateTime   @updatedAt                         // Auto updated timestamp
  deletedAt DateTime?                                      // Optional soft delete timestamp


  // Foreign key to User (creator)
  creator     User       @relation("createdRooms", fields: [creatorId], references: [id])
  creatorId   String                                        // FK to User.id

  // Relations
  users       User[]     @relation("UserRooms")             // Users in this room
  messages    Message[]  @relation("RoomMessages")          // Messages in this room
  media       Media[]                                        // Media uploaded to room
}

// =========================
// Message Model
// =========================
model Message {
  id        String    @id @default(uuid())                  // Primary key
  content   String                                         // Message content
  createdAt DateTime  @default(now())                      // Created timestamp
  updatedAt DateTime  @updatedAt                           // Auto updated timestamp
  deletedAt DateTime?                                      // Optional soft delete timestamp

  // Foreign Keys
  user      User      @relation("UserMessages", fields: [userId], references: [id])
  userId    String                                        // FK to User

  room      Room      @relation("RoomMessages", fields: [roomId], references: [id])
  roomId    String                                        // FK to Room
}

// =========================
// Media Model
// =========================
model Media {
  id        String    @id @default(uuid())                 // Primary key
  url       String                                         // URL/path to media file
  type      MediaType                                          // Type: image or video
  createdAt DateTime  @default(now())                     // Created timestamp
  updatedAt DateTime  @updatedAt                          // Auto updated timestamp

  // Foreign Keys
  user      User      @relation("UserMedia", fields: [userId], references: [id])
  userId    String                                       // FK to User

  room      Room      @relation(fields: [roomId], references: [id])
  roomId    String                                       // FK to Room
}

// =========================
// AIQuery Model
// =========================
model AIQuery {
  id        String    @id @default(uuid())                 // Primary key
  query     String                                        // Question sent by user
  response  Json?                                       // Response from AI (optional)
  createdAt DateTime  @default(now())                     // Created timestamp
  updatedAt DateTime  @updatedAt                          // Auto updated timestamp
  deletedAt DateTime?                                      // Optional soft delete timestamp


  // Foreign Key
  user      User      @relation("UserAIQueries", fields: [userId], references: [id])
  userId    String                                       // FK to User
}

enum MediaType {
  IMAGE
  VIDEO
}

enum UserRole {
  User
  ADMIN
  MODERATOR
  AI
}