generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  username     String    @unique @db.VarChar(30)
  firstName    String    @default("")
  lastName     String    @default("")
  email        String    @unique @db.VarChar(50)
  password     String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  role         UserRole? @default(User)
  deletedAt    DateTime?
  aiQueries    AIQuery[] @relation("UserAIQueries")
  media        Media[]   @relation("UserMedia")
  messages     Message[] @relation("UserMessages")
  createdRooms Room[]    @relation("createdRooms")
  rooms        Room[]    @relation("UserRooms")
}

model Room {
  id          String    @id @default(uuid())
  name        String
  description String?
  slug        String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  creatorId   String
  media       Media[]
  messages    Message[] @relation("RoomMessages")
  creator     User      @relation("createdRooms", fields: [creatorId], references: [id])
  users       User[]    @relation("UserRooms")
}

model Message {
  id        String    @id @default(uuid())
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  userId    String
  roomId    String
  room      Room      @relation("RoomMessages", fields: [roomId], references: [id])
  user      User      @relation("UserMessages", fields: [userId], references: [id])
}

model Media {
  id        String    @id @default(uuid())
  url       String
  type      MediaType
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  roomId    String
  room      Room      @relation(fields: [roomId], references: [id])
  user      User      @relation("UserMedia", fields: [userId], references: [id])
}

model AIQuery {
  id        String    @id @default(uuid())
  query     String
  response  Json?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  userId    String
  user      User      @relation("UserAIQueries", fields: [userId], references: [id])
}

enum MediaType {
  IMAGE
  VIDEO
}

enum UserRole {
  User
  ADMIN
  MODERATOR
  AI
}
